##
## Standard option
##
#
# It will NOT export tablespace DDL command, only objects DDL and its data.
# So before import you have to pre-create tablespace with same name on target database to avoid possible error messages.

USERID='/ as sysdba'
DIRECTORY=DATA_PUMP
DUMPFILE=expdp_TABLESPACE_%U.dmp
LOGFILE=expdp_TABLESPACE.log
CLUSTER=NO
TABLESPACES=<<<TABLESPACE_NAME_1>>>,<<<TABLESPACE_NAME_2>>>
CONTENT=ALL
PARALLEL=2
LOGTIME=ALL
METRICS=YES
COMPRESSION=ALL
FLASHBACK_TIME=SYSDATE

##
## Transportable Tablespace Option - it required additional steps
##
#
# 1. Run Transport Set Check:
#
# SQL> exec dbms_tts.transport_set_check('<<<TABLESPACE_NAME_1>>>,<<<TABLESPACE_NAME_2>>>', true);
#
# SQL> select * from transport_set_violations;
#
# 2. Put tablespace(s) to READ-ONLY Mode:
#
# SQL> alter tablespace <<<TABLESPACE_NAME_1>>> read only;
#
# SQL> alter tablespace <<<TABLESPACE_NAME_2>>> read only;
#
# 3. Take export using expdp with option below (it will perform tablespace(s) meta data export):
#
# $ cat impdp_tablespace.par  ---> NOTE: some options like PARALLEL, CONTENT, FLASHBACK_TIME - can NOT be used in case of TTS export. 
# -------------------------- 
# USERID='/ as sysdba'
# DIRECTORY=DATA_PUMP
# DUMPFILE=expdp_TTS_%U.dmp
# LOGFILE=expdp_TTS.log
# CLUSTER=NO
# LOGTIME=ALL
# METRICS=YES
# TRANSPORT_TABLESPACES=<<<TABLESPACE_NAME_1>>>,<<<TABLESPACE_NAME_2>>>
# --------------------------
#
# 4. Copy tablespace(s) datafile(s) to target database.
#
# 5. Get back tablespace(s) on source database to READ-WRITE mode:
#
# SQL> alter tablespace <<<TABLESPACE_NAME_1>>> read write;
#
# SQL> alter tablespace <<<TABLESPACE_NAME_2>>> read write;
#
# ************
# *** NOTE *** Additional steps may to be required if you are using TTS for cross-platform migrations. Ref. to 371556.1 doc for examples. 
# ************
